---
import type { MarkdownHeading } from "astro";

type Props = {
  headings: MarkdownHeading[];
};

type HeadingWithSubheadings = MarkdownHeading & {
  subheadings: MarkdownHeading[];
};

const { headings } = Astro.props;

const grouppedHeadings = headings.reduce((array, heading) => {
  if (heading.depth === 2) {
    array.push({ ...heading, subheadings: [] });
  } else if (heading.depth === 3) {
    array.at(-1)?.subheadings.push(heading);
  }

  return array;
}, [] as HeadingWithSubheadings[]);
---

<nav
  id="toc"
  class= "hidden dark:text-white md:block mt-4 mx-4 w-[250px] sticky top-0 left-0"
  aria-label="Table Of Contents"
>
  <ol>
    <li>On this page</li>
    {
      grouppedHeadings.map((h) => (
        <li class="ml-3">
          <a href={`#${h.slug}`}>{h.text}</a>
          {h.subheadings.length > 0 && (
            <ol>
              {h.subheadings.map((sub) => (
                <li>
                  <a href={`#${sub.slug}`}>{sub.text}</a>
                </li>
              ))}
            </ol>
          )}
        </li>
      ))
    }
  </ol>
</nav>

<script is:inline>
  const observer = new IntersectionObserver(
    (entries) => {
      for (const entry of entries) {
        const headingFragment = `#${entry.target.id}`;
        const tocItem = document.querySelector(`a[href="${headingFragment}"]`);

        if (entry.isIntersecting) {
          const previouslyActivatedItem =
            document.querySelector(".active-toc-item");

          previouslyActivatedItem?.classList.remove("active-toc-item");
          tocItem.classList.add("active-toc-item");
          console.log("intersection happening");
        } else {
          const isAnyOtherEntryIntersecting = entries.some(
            (e) => e.target.id !== entry.target.id && e.isIntersecting
          );

          if (isAnyOtherEntryIntersecting) {
            tocItem.classList.remove("active-toc-item");
          }
        }
      }
    },
    { root: null, rootMargin: "0px", threshold: [1] }
  );

  const sectionHeadings = document.querySelectorAll("h2");

  console.log(sectionHeadings);
  for (const heading of sectionHeadings) {
    observer.observe(heading);
  }
</script>

<style>
  #toc a {
    position: relative;
    text-decoration: none;
    transition: color 0.3s ease; /* Add transition for color change */
  }

  /* Add the underline effect */
  #toc a::before {
    content: "";
    position: absolute;
    bottom: -2px; /* Adjust the distance from the text */
    left: 0;
    width: 100%;
    height: 2px; /* Set the initial height of the underline */
    background-color: #007bff; /* Set your desired underline color */
    transform-origin: right;
    transform: scaleX(0); /* Initial state: no underline */
    transition: transform 0.3s ease;
  }

  /* Add the active-toc-item class to trigger the underline animation */
  #toc a.active-toc-item::before {
    transform-origin: left;
    transform: scaleX(1); /* Final state: full underline */
  }

  /* Change text color on hover */
  #toc a:hover {
    color: #007bff; /* Set your desired hover text color */
  }
</style>
